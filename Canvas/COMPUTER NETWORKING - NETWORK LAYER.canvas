{
	"nodes":[
		{"id":"5b1f86cea9a72cd1","x":-645,"y":-262,"width":762,"height":427,"type":"text","text":"The network layer is crucial for managing data transmission across interconnected networks, ensuring data packets are properly routed from source to destination. Here is a detailed explanation of the key services provided by the network layer, as described in the given text:\n\n1. **Packetizing**:\n    - **Encapsulation and Decapsulation**: The network layer encapsulates the payload (data from the upper layer) into a packet at the source and decapsulates it at the destination.\n    - **Header Information**: The packet includes a header with source and destination addresses, which are crucial for routing.\n    - **Fragmentation and Reassembly**: If the payload is too large, it is fragmented, and the network layer ensures these fragments are reassembled correctly at the destination.\n\n2. **Routing**:\n    - **Finding the Best Path**: The network layer determines the optimal path for data packets from source to destination using routing protocols.\n    - **Routing Protocols**: These protocols help routers build and maintain routing tables, ensuring efficient and consistent packet delivery.\n\n3. **Forwarding**:\n    - **Forwarding Table**: Routers use a forwarding table to decide where to send incoming packets based on their destination addresses.\n    - **Packet Transfer**: The router forwards the packet to the appropriate output interface to continue its journey towards the destination.\n\n4. **Error Control**:\n    - **Header Checksum**: The network layer includes a checksum in the packet header to detect and prevent header corruption.\n    - **ICMP**: The Internet Control Message Protocol (ICMP) provides error reporting and diagnostics for network issues.\n\n5. **Flow Control**:\n    - **Lack of Direct Flow Control**: The network layer does not directly implement flow control because upper layers handle it, and the simplicity of the network layer minimizes the risk of overwhelming the receiver.\n\n6. **Congestion Control**:\n    - **Managing Network Congestion**: Although not dir ectly implemented in the Internet's network layer, congestion control mechanisms are essential to prevent network collapse due to excessive data packets.\n\n7. **Quality of Service (QoS)**:\n    - **Supporting Multimedia Communication**: As the Internet supports real-time audio and video, QoS has become essential. Although mostly managed by upper layers, QoS ensures better performance for multimedia applications.\n\n8. **Security**:\n    - **IPSec**: To address security concerns in a connectionless environment, the Internet uses IPSec, which provides secure, connection-oriented services at a virtual layer.\n\nThese services ensure efficient, reliable, and secure data transmission across the diverse and interconnected networks that form the Internet."},
		{"id":"20df2df6b12244d8","x":-645,"y":250,"width":814,"height":343,"type":"text","text":"## 4.1.2 Packet Switching\n\n### Introduction to Packet Switching\n\nAt the network layer, switching is essential for directing data from one point to another. Unlike electrical switches that direct electricity flow, routers in data networks switch packets of data between input and output ports. This switching technique at the network layer is known as packet switching, which is different from circuit switching often used at the physical layer.\n\n### Types of Packet Switching\n\nPacket-switched networks at the network layer can use two primary approaches to route packets: the datagram approach (connectionless service) and the virtual-circuit approach (connection-oriented service).\n\n#### Datagram Approach: Connectionless Service\n\nIn the datagram approach, each packet is treated independently, without any relationship to other packets. This means:\n\n- Each packet may travel a different path to the destination.\n- Routers (also called switches) forward packets based solely on the destination address in the packet's header.\n- The source and destination addresses are used to identify the origin and target of the packet. The source address helps in sending error messages back if the packet is discarded.\n- The packets may arrive out of order at the destination, which must reassemble them.\n\nThe following figure illustrates the datagram approach:\n\n**Figure: A Connectionless Packet-Switched Network**\n\n![Connectionless Packet-Switched Network](connectionless-network.png)\n\n1. Packets from the sender (Source) are sent one by one.\n2. Each packet might follow a different path through various routers (R 1, R 2, R 3, R 4, R 5) to reach the receiver (Destination).\n3. Packets might arrive out of order.\n\n#### Virtual-Circuit Approach: Connection-Oriented Service\n\nIn the virtual-circuit approach, all packets belonging to a message follow the same path through the network. This approach involves three phases: setup, data transfer, and teardown.\n\n1. **Setup Phase:**\n   - Before any data can be sent, a virtual circuit is established between the sender and receiver.\n   - Routers along the path create entries in their tables for this virtual circuit.\n   - The setup involves exchanging special packets (request and acknowledgment) to establish the path and labels (identifiers) for the virtual circuit.\n\n**Figure: Setup Phase in a Virtual-Circuit Network**\n\n![Setup Phase](setup-phase.png)\n\nSteps:\n1. Source A sends a request packet to the first router (R 1).\n2. Each router forwards the request packet to the next router, updating its table with the incoming port, an incoming label, and the outgoing port.\n3. When the request packet reaches the destination (B), it assigns a label for incoming packets from A.\n\n2. **Data Transfer Phase:**\n   - Once the setup is complete, data packets are sent from the source to the destination.\n   - Each router forwards the packets based on the labels assigned during the setup phase.\n   - The packets arrive in order at the destination.\n\n**Figure: Data Transfer Phase in a Virtual-Circuit Network**\n\n![Data Transfer Phase](data-transfer-phase.png)\n\nSteps:\n1. Source A sends a data packet with a label assigned during the setup phase.\n2. Each router updates the packet with the corresponding outgoing label before forwarding it.\n3. The packet reaches the destination with the final label.\n\n3. **Teardown Phase:**\n   - After the data transfer is complete, the source sends a teardown packet to terminate the virtual circuit.\n   - The destination responds with a confirmation packet.\n   - Each router deletes the corresponding entries from their tables.\n\n**Figure: Teardown Phase in a Virtual-Circuit Network**\n\n![Teardown Phase](teardown-phase.png)\n\nSteps:\n1. Source A sends a teardown packet to the destination (B).\n2. Each router along the path deletes the entries related to the virtual circuit.\n3. The destination confirms the teardown.\n\n### Comparison of Datagram and Virtual-Circuit Approaches\n\n- **Datagram Approach:**\n  - Connectionless service.\n  - Independent packet forwarding.\n  - Packets may arrive out of order.\n  - Simpler, but less reliable in terms of packet order and potential congestion.\n\n- **Virtual-Circuit Approach:**\n  - Connection-oriented service.\n  - Packets follow the same path.\n  - Packets arrive in order.\n  - Requires setup and teardown phases, which add overhead but provide more reliable and orderly delivery.\n\nIn conclusion, while the datagram approach is simpler and more flexible, the virtual-circuit approach ensures more reliable and orderly data delivery by establishing a predefined path for the packets."},
		{"id":"30f964048a196e14","x":-645,"y":645,"width":814,"height":706,"type":"text","text":"### 4.1.3 Network-Layer Performance\n\n**Upper-Layer Expectations vs. Reality**\n\nUpper-layer protocols expect ideal service from the network layer, but in reality, network performance can vary significantly. Key performance metrics include **delay**, **throughput**, and **packet loss**. These metrics help in understanding the efficiency and reliability of the network.\n\n#### Delay\n\n**Delay** refers to the time a packet takes to travel from the source to the destination. There are four primary types of delays:\n\n1. **Transmission Delay**:\n   - **Definition**: The time taken to push all the packet bits onto the transmission medium.\n   - **Formula**: \\( \\text{Delay}_{tr} = \\frac{\\text{Packet Length}}{\\text{Transmission Rate}} \\)\n   - **Example**: In a Fast Ethernet LAN with a transmission rate of 100 Mbps, a packet of 10,000 bits takes 100 microseconds to transmit.\n\n2. **Propagation Delay**:\n   - **Definition**: The time taken for a bit to propagate from one point to another in the medium.\n   - **Formula**: \\( \\text{Delay}_{pg} = \\frac{\\text{Distance}}{\\text{Propagation Speed}} \\)\n   - **Example**: For a 2000-meter cable with a propagation speed of \\(2 \\times 10^8\\) meters/second, the delay is 10 microseconds.\n\n3. **Processing Delay**:\n   - **Definition**: The time required to process a packet at a router or a destination host, including error checking and header removal.\n\n4. **Queuing Delay**:\n   - **Definition**: The time a packet spends waiting in the input and output queues of routers.\n   - **Example**: Similar to planes waiting for landing or departure at an airport.\n\n**Total Delay Calculation**:\n   - **Formula**: \n     \\[\n     \\text{Total Delay} = (n + 1) \\times (\\text{Delay}_{tr} + \\text{Delay}_{pg} + \\text{Delay}_{pr}) + n \\times \\text{Delay}_{qu}\n     \\]\n   - Where \\( n \\) is the number of routers in the path.\n\n#### Throughput\n\n**Throughput** measures the rate at which data passes through the network.\n\n- **Definition**: The number of bits passing through a point per second.\n- **Bottleneck Effect**: Throughput is limited by the slowest link in the path.\n  - **Example**: If data passes through links with rates 200 Kbps, 100 Kbps, and 150 Kbps, the throughput is 100 Kbps.\n\nIn a more practical Internet scenario, data often travels through two access networks and a high-speed Internet backbone. The throughput is typically determined by the slower of the two access networks.\n\n- **Example**: If a server is connected via a Fast Ethernet LAN (100 Mbps) and a user is connected via a dial-up line (40 Kbps), the throughput is 40 Kbps.\n\n#### Packet Loss\n\n**Packet Loss** occurs when packets are dropped due to full buffers at routers. \n\n- **Impact**: Packet loss necessitates retransmissions, which can lead to further congestion and more packet loss.\n- **Buffer Management**: Effective queue management can help mitigate packet loss by preventing buffer overflow.\n\n**Theoretical Studies**: Research in queuing theory aims to optimize buffer management to minimize packet loss.\n\n---\n\nUnderstanding these concepts helps in designing and optimizing networks to ensure better performance and reliability, balancing the needs of upper-layer protocols with the practical limitations of network infrastructure."},
		{"id":"4a57f457e9adf268","x":-742,"y":1416,"width":933,"height":624,"type":"text","text":"## Network-Layer Congestion\n\n### Understanding Congestion\nIn Chapter 3, we explored transport layer congestion. Although the Internet model does not explicitly address network-layer congestion, examining it can provide insights into transport-layer congestion causes and potential network-layer remedies. Network-layer congestion primarily affects throughput and delay, which we discussed in the previous section. \n\n**Figure 4.13** illustrates how these two performance measures behave under varying loads:\n- **Delay**: When the load is much less than the network's capacity, the delay is minimal, consisting only of negligible propagation and processing delays. As the load approaches capacity, queuing delays add up, sharply increasing total delay. Beyond capacity, the delay becomes infinite.\n- **Throughput**: Initially, throughput increases proportionally with load. However, once load exceeds capacity, throughput declines due to packet discards by routers, leading to retransmissions and further congestion.\n\n### Congestion Control Mechanisms\nCongestion control aims to prevent or alleviate congestion through various techniques, categorized into open-loop (prevention) and closed-loop (removal) mechanisms.\n\n#### Open-Loop Congestion Control\nOpen-loop control involves proactive policies to prevent congestion:\n\n1. **Retransmission Policy**: Efficient retransmission policies and timers can prevent congestion. While retransmissions are sometimes necessary, excessive or poorly managed retransmissions can exacerbate congestion.\n   \n2. **Window Policy**: The type of sender window can impact congestion. Selective Repeat is preferable over Go-Back-N, as it avoids unnecessary retransmissions of successfully received packets, thus reducing congestion.\n\n3. **Acknowledgment Policy**: Receivers can help manage congestion by reducing the frequency of acknowledgments. Methods include sending acknowledgments only when there are packets to send or after a timer expires.\n\n4. **Discarding Policy**: Routers can mitigate congestion by discarding less critical packets, such as less sensitive audio packets, thus preserving overall transmission quality and reducing congestion.\n\n5. **Admission Policy**: In virtual-circuit networks, routers can use admission policies to check resource availability before establishing connections, preventing potential congestion.\n\n#### Closed-Loop Congestion Control\nClosed-loop mechanisms address congestion after it occurs:\n\n1. **Backpressure**: This method involves a congested node signaling upstream nodes to slow down, propagating back to the source. It is applicable only in virtual-circuit networks.\n\n2. **Choke Packet**: A router experiencing congestion sends a choke packet directly to the source, informing it to slow down. Intermediate nodes are not involved.\n\n3. **Implicit Signaling**: The source infers congestion from symptoms like delayed acknowledgments and adjusts its sending rate accordingly, as seen in TCP congestion control.\n\n4. **Explicit Signaling**: Congested nodes include congestion signals in data packets sent to the source or destination, prompting them to reduce the load. This method is employed in ATM networks.\n\n**Figures 4.14 and 4.15** illustrate backpressure and choke packet methods, respectively:\n- **Backpressure**: Congestion information propagates backward from the congested node to the source.\n- **Choke Packet**: A congested node sends a choke packet directly to the source, bypassing intermediate nodes. \n\nThese mechanisms collectively help manage network-layer congestion, ensuring better network performance and stability."},
		{"id":"e13e78ee327dc2c1","x":-742,"y":2063,"width":914,"height":706,"type":"text","text":"### Structure of a Router\n\nIn networking, a router is a crucial device that forwards data packets between computer networks. It routes the data from the source to the destination by choosing the optimal path. To understand how a router works, we need to look at its internal structure. A router consists of four main components:\n\n1. **Input Ports**\n2. **Output Ports**\n3. **Routing Processor**\n4. **Switching Fabric**\n\n#### Input Ports\nInput ports perform several functions:\n\n- **Physical Layer Processing**: The physical-layer processor receives the bits from the incoming signal.\n- **Link Layer Processing**: The link-layer processor decapsulates the packet from the frame, checks for errors, and discards corrupted packets.\n- **Buffering**: Packets are held in input buffers (queues) before being forwarded to the switching fabric.\n\n#### Output Ports\nOutput ports mirror the functions of input ports but in reverse order:\n\n- **Queueing**: Outgoing packets are queued.\n- **Link Layer Processing**: Packets are encapsulated into frames.\n- **Physical Layer Processing**: Frames are converted to signals and transmitted over the physical medium.\n\n#### Routing Processor\nThe routing processor performs network layer functions, including:\n\n- **Address Lookup**: Determines the next hop for the packet using the destination address.\n- **Forwarding Decision**: Identifies the appropriate output port for packet transmission.\n- **Table Lookup**: This process is often expedited by moving some routing functions to input ports in modern routers.\n\n#### Switching Fabric\nThe switching fabric connects input ports to output ports. It is responsible for moving packets swiftly from input queues to output queues. Different types of switching fabrics include:\n\n1. **Crossbar Switch**:\n   - A grid of microswitches that connects \\( n \\) inputs to \\( n \\) outputs.\n   - Each crosspoint in the grid can either connect or disconnect an input-output pair.\n\n2. **Banyan Switch**:\n   - A multistage switch with \\( \\log_2 (n) \\) stages and \\( n/2 \\) microswitches per stage.\n   - Packets are routed based on the bits of the output port number in binary form.\n   - Each stage routes packets according to successive bits of the output port address.\n\n3. **Batcher-Banyan Switch**:\n   - Combines a Batcher sorting switch and a Banyan switch.\n   - The Batcher switch sorts packets based on their destination ports to prevent internal collisions.\n   - A trap module may be added to ensure only one packet per destination port is processed at each tick.\n\n#### Examples of Switching Fabrics\n\n**Crossbar Switch Example**:\n- Each input is connected to each output through a dedicated path.\n- Simple but can become impractical for large \\( n \\) due to the large number of crosspoints.\n\n**Banyan Switch Example**:\n- For \\( n = 8 \\), the number of stages is \\( \\log_2 (8) = 3 \\).\n- Routing is based on binary representation of output ports:\n  - A packet at input port 1 destined for output port 6 (binary 110) is routed through microswitches based on each bit (1 → 1 → 0).\n  - A packet at input port 5 destined for output port 2 (binary 010) follows a different path (0 → 1 → 0).\n\n**Batcher-Banyan Switch Example**:\n- The Batcher switch sorts packets before entering the Banyan switch.\n- This avoids internal collisions and ensures efficient routing.\n- The trap module allows only one packet per destination to pass through each tick, managing potential conflicts.\n\nIn summary, a router is composed of input ports, output ports, a routing processor, and switching fabric. These components work together to efficiently route packets from their source to their destination, ensuring minimal delay and handling large volumes of traffic effectively."}
	],
	"edges":[]
}